use lazy_static::lazy_static;
use std::collections::HashMap;

/// A utility function that returns the inverse mapping of byte tokens.
/// Used when compiling instead of decompiling.
///
/// This function constructs a `HashMap` where the key is a `&'static str` and the value is a [`Byte`].
///
/// # Examples
///
/// ```
/// use tio2::translation::tokens::{get_inverse_tokens, BYTE_TOKENS, Byte};
///
/// let inverse_tokens = get_inverse_tokens();
/// let token = ">DMS";
/// if let Some(byte) = inverse_tokens.get(token) {
///     assert_eq!(&token, BYTE_TOKENS.get(byte).unwrap());
/// }
/// ```
pub fn get_inverse_tokens() -> HashMap<&'static str, Byte> {
    let mut flipped: HashMap<&'static str, Byte> = Default::default();

    BYTE_TOKENS.clone().into_iter().for_each(|(key, value)| {
        flipped.insert(value, key);
    });

    flipped
}

/// The `Byte` enum represents bytes, which can be either single bytes (`Single`) or
/// two bytes (`Double`).
///
/// # Examples
///
/// ```
/// use tio2::translation::tokens::{BYTE_TOKENS, Byte};
///
/// // Access the token for a double byte (e.g., [0x60, 0x00])
/// if let Some(token) = BYTE_TOKENS.get(&Byte::Double([0x60, 0x00])) {
///     assert_eq!(token, &"Pic1");
/// }
/// ```
#[derive(Debug, Clone, Copy, Hash, PartialEq, Eq)]
pub enum Byte {
    Single(u8),
    Double([u8; 2]),
}

lazy_static! {
    /// Provides a `HashMap` of byte tokens where the key is a [`Byte`] and the value is a `&'static str`.
    ///
    /// This hash map contains mappings for byte tokens used in TI-8XP files.
    ///
    /// # Example
    ///
    /// ```
    /// use tio2::translation::tokens::{BYTE_TOKENS, Byte};
    ///
    /// if let Some(token) = BYTE_TOKENS.get(&Byte::Single(0x01)) {
    ///     assert_eq!(token, &">DMS");
    /// }
    /// ```
    pub static ref BYTE_TOKENS: HashMap<Byte, &'static str> = [
        (Byte::Single(0x01), ">DMS"),
        (Byte::Single(0x02), ">Dec"),
        (Byte::Single(0x03), ">Frac"),
        (Byte::Single(0x04), "->"),
        (Byte::Single(0x05), "BoxPlot"),
        (Byte::Single(0x06), "["),
        (Byte::Single(0x07), "]"),
        (Byte::Single(0x08), "{"),
        (Byte::Single(0x09), "}"),
        (Byte::Single(0x0B), "°"),
        (Byte::Single(0x0C), "^-1"),
        (Byte::Single(0x0D), "^2"),
        (Byte::Single(0x0E), "^T"),
        (Byte::Single(0x0F), "^3"),
        (Byte::Single(0x10), "("),
        (Byte::Single(0x11), ")"),
        (Byte::Single(0x12), "round("),
        (Byte::Single(0x13), "pxl-Test("),
        (Byte::Single(0x14), "augment("),
        (Byte::Single(0x15), "rowSwap("),
        (Byte::Single(0x16), "row+("),
        (Byte::Single(0x17), "*row("),
        (Byte::Single(0x18), "*row+("),
        (Byte::Single(0x19), "max("),
        (Byte::Single(0x1A), "min("),
        (Byte::Single(0x1B), "R>Pr("),
        (Byte::Single(0x1C), "R>Pθ("),
        (Byte::Single(0x1D), "P>Rx("),
        (Byte::Single(0x1E), "P>Ry("),
        (Byte::Single(0x1F), "median("),
        (Byte::Single(0x20), "randM("),
        (Byte::Single(0x21), "mean("),
        (Byte::Single(0x22), "solve("),
        (Byte::Single(0x23), "seq("),
        (Byte::Single(0x24), "fnInt("),
        (Byte::Single(0x25), "nDeriv("),
        (Byte::Single(0x27), "fMin("),
        (Byte::Single(0x28), "fMax("),
        (Byte::Single(0x29), " "),
        (Byte::Single(0x2A), "\""),
        (Byte::Single(0x2B), ","),
        (Byte::Single(0x2C), "imaginary"),
        (Byte::Single(0x2D), "!"),
        (Byte::Single(0x2E), "CubicReg "),
        (Byte::Single(0x2F), "QuartReg "),
        (Byte::Single(0x3A), "."),
        // Alternate notation of E
        (Byte::Single(0x3B), "10^"),
        (Byte::Single(0x3C), " or "),
        (Byte::Single(0x3D), " xor "),
        (Byte::Single(0x3E), ":"),
        (Byte::Single(0x3F), "\n"),
        (Byte::Single(0x40), " and "),
        (Byte::Single(0x41), "A"),
        (Byte::Single(0x42), "B"),
        (Byte::Single(0x43), "C"),
        (Byte::Single(0x44), "D"),
        (Byte::Single(0x45), "E"),
        (Byte::Single(0x46), "F"),
        (Byte::Single(0x47), "G"),
        (Byte::Single(0x48), "H"),
        (Byte::Single(0x49), "I"),
        (Byte::Single(0x4A), "J"),
        (Byte::Single(0x4B), "K"),
        (Byte::Single(0x4C), "L"),
        (Byte::Single(0x4D), "M"),
        (Byte::Single(0x4E), "N"),
        (Byte::Single(0x4F), "O"),
        (Byte::Single(0x50), "P"),
        (Byte::Single(0x51), "Q"),
        (Byte::Single(0x52), "R"),
        (Byte::Single(0x53), "S"),
        (Byte::Single(0x54), "T"),
        (Byte::Single(0x55), "U"),
        (Byte::Single(0x56), "V"),
        (Byte::Single(0x57), "W"),
        (Byte::Single(0x58), "X"),
        (Byte::Single(0x59), "Y"),
        (Byte::Single(0x5A), "Z"),
        (Byte::Single(0x30), "0"),
        (Byte::Single(0x31), "1"),
        (Byte::Single(0x32), "2"),
        (Byte::Single(0x33), "3"),
        (Byte::Single(0x34), "4"),
        (Byte::Single(0x35), "5"),
        (Byte::Single(0x36), "6"),
        (Byte::Single(0x37), "7"),
        (Byte::Single(0x38), "8"),
        (Byte::Single(0x39), "9"),
        (Byte::Single(0x5B), "θ"),
        (Byte::Single(0x5F), "prgm"),
        (Byte::Single(0x64), "Radian"),
        (Byte::Single(0x65), "Degree"),
        (Byte::Single(0x66), "Normal"),
        (Byte::Single(0x67), "Sci"),
        (Byte::Single(0x68), "Eng"),
        (Byte::Single(0x69), "Float"),
        (Byte::Single(0x6A), "="),
        (Byte::Single(0x6B), "<"),
        (Byte::Single(0x6C), ">"),
        (Byte::Single(0x6D), "<="),
        (Byte::Single(0x6E), ">="),
        (Byte::Single(0x6F), "!="),
        (Byte::Single(0x70), "+"),
        (Byte::Single(0x71), "–"),
        (Byte::Single(0x72), "Ans"),
        (Byte::Single(0x73), "Fix "),
        (Byte::Single(0x74), "Horiz"),
        (Byte::Single(0x75), "Full"),
        (Byte::Single(0x76), "Func"),
        (Byte::Single(0x77), "Param"),
        (Byte::Single(0x78), "Polar"),
        (Byte::Single(0x79), "Seq"),
        (Byte::Single(0x7A), "IndpntAuto"),
        (Byte::Single(0x7B), "IndpntAsk"),
        (Byte::Single(0x7C), "DependAuto"),
        (Byte::Single(0x7D), "DependAsk"),
        (Byte::Single(0x7F), "[box]"),
        (Byte::Single(0x80), "[cross]"),
        (Byte::Single(0x81), "[dot]"),
        (Byte::Single(0x82), "*"),
        (Byte::Single(0x83), "/"),
        (Byte::Single(0x84), "Trace"),
        (Byte::Single(0x85), "ClrDraw"),
        (Byte::Single(0x86), "ZStandard"),
        (Byte::Single(0x87), "ZTrig"),
        (Byte::Single(0x88), "ZBox"),
        (Byte::Single(0x89), "Zoom_In"),
        (Byte::Single(0x8A), "Zoom_Out"),
        (Byte::Single(0x8B), "ZSquare"),
        (Byte::Single(0x8C), "ZInteger"),
        (Byte::Single(0x8D), "ZPrevious"),
        (Byte::Single(0x8E), "ZDecimal"),
        (Byte::Single(0x8F), "ZoomStat"),
        (Byte::Single(0x90), "ZoomRcl"),
        (Byte::Single(0x91), "PrintScreen"),
        (Byte::Single(0x92), "ZoomSto"),
        (Byte::Single(0x93), "Text("),
        (Byte::Single(0x94), " nPr "),
        (Byte::Single(0x95), " nCr "),
        (Byte::Single(0x96), "FnOn "),
        (Byte::Single(0x97), "FnOff "),
        (Byte::Single(0x98), "StorePic "),
        (Byte::Single(0x99), "RecallPic "),
        (Byte::Single(0x9A), "StoreGDB "),
        (Byte::Single(0x9B), "RecallGDB "),
        (Byte::Single(0x9C), "Line("),
        (Byte::Single(0x9D), "Vertical "),
        (Byte::Single(0x9E), "Pt-On("),
        (Byte::Single(0x9F), "Pt-Off("),
        (Byte::Single(0xA0), "Pt-Change( "),
        (Byte::Single(0xA1), "Pxl-On( "),
        (Byte::Single(0xA2), "Pxl-Off( "),
        (Byte::Single(0xA3), "Pxl-Change( "),
        (Byte::Single(0xA4), "Shade("),
        (Byte::Single(0xA5), "Circle("),
        (Byte::Single(0xA6), "Horizontal "),
        (Byte::Single(0xA7), "Tangent("),
        (Byte::Single(0xA8), "DrawInv "),
        (Byte::Single(0xA9), "DrawF "),
        (Byte::Single(0xAB), "rand"),
        (Byte::Single(0xAC), "π"),
        (Byte::Single(0xAD), "getKey"),
        (Byte::Single(0xAE), "\'"),
        (Byte::Single(0xAF), "?"),
        (Byte::Single(0xB0), "-"),
        (Byte::Single(0xB1), "int("),
        (Byte::Single(0xB2), "abs("),
        (Byte::Single(0xB3), "det("),
        (Byte::Single(0xB4), "identity("),
        (Byte::Single(0xB5), "dim("),
        (Byte::Single(0xB6), "sum("),
        (Byte::Single(0xB7), "prod("),
        (Byte::Single(0xB8), "not("),
        (Byte::Single(0xB9), "iPart("),
        (Byte::Single(0xBA), "fPart("),
        (Byte::Single(0xBC), "sqrt("),
        (Byte::Single(0xBD), "cubrt("),
        (Byte::Single(0xBE), "ln ("),
        (Byte::Single(0xBF), "e^("),
        (Byte::Single(0xC0), "log("),
        (Byte::Single(0xC1), "10^("),
        (Byte::Single(0xC2), "sin("),
        (Byte::Single(0xC3), "sin^-1("),
        (Byte::Single(0xC4), "cos("),
        (Byte::Single(0xC5), "cos^-1("),
        (Byte::Single(0xC6), "tan("),
        (Byte::Single(0xC7), "tan^-1("),
        (Byte::Single(0xC8), "sinh("),
        (Byte::Single(0xC9), "sinh^-1("),
        (Byte::Single(0xCA), "cosh("),
        (Byte::Single(0xCB), "cosh^-1("),
        (Byte::Single(0xCC), "tanh("),
        (Byte::Single(0xCD), "tanh^-1("),
        (Byte::Single(0xCE), "If "),
        (Byte::Single(0xCF), "Then"),
        (Byte::Single(0xD0), "Else"),
        (Byte::Single(0xD1), "While "),
        (Byte::Single(0xD2), "Repeat "),
        (Byte::Single(0xD3), "For "),
        (Byte::Single(0xD4), "End"),
        (Byte::Single(0xD5), "Return"),
        (Byte::Single(0xD6), "Lbl "),
        (Byte::Single(0xD7), "Goto "),
        (Byte::Single(0xD8), "Pause "),
        (Byte::Single(0xD9), "Stop"),
        (Byte::Single(0xDA), "IS>("),
        (Byte::Single(0xDB), "DS>("),
        (Byte::Single(0xDC), "Input "),
        (Byte::Single(0xDD), "Prompt "),
        (Byte::Single(0xDE), "Disp "),
        (Byte::Single(0xDF), "DispGraph"),
        (Byte::Single(0xE0), "Output("),
        (Byte::Single(0xE1), "ClrHome"),
        (Byte::Single(0xE2), "Fill("),
        (Byte::Single(0xE3), "SortA("),
        (Byte::Single(0xE4), "SortD("),
        (Byte::Single(0xE5), "DispTable"),
        (Byte::Single(0xE6), "Menu("),
        (Byte::Single(0xE7), "Send("),
        (Byte::Single(0xE8), "Get("),
        (Byte::Single(0xE9), "PlotsOn "),
        (Byte::Single(0xEA), "PlotsOff "),
        (Byte::Single(0xEC), "Plot1("),
        (Byte::Single(0xED), "Plot2("),
        (Byte::Single(0xEE), "Plot3("),
        (Byte::Single(0xF0), "^"),
        (Byte::Single(0xF1), "[xth root]"),
        (Byte::Single(0xF2), "1-Var Stats "),
        (Byte::Single(0xF3), "2-Var Stats "),
        (Byte::Single(0xF4), "LinReg(a+bx) "),
        (Byte::Single(0xF5), "ExpReg "),
        (Byte::Single(0xF6), "LnReg "),
        (Byte::Single(0xF7), "PwrReg "),
        (Byte::Single(0xF8), "Med-Med "),
        (Byte::Single(0xF9), "QuadReg "),
        (Byte::Single(0xFA), "ClrList "),
        (Byte::Single(0xFB), "ClrTable"),
        (Byte::Single(0xFC), "Histogram"),
        (Byte::Single(0xFD), "xyLine"),
        (Byte::Single(0xFE), "Scatter"),
        (Byte::Single(0xFF), "LinReg(ax+b) "),
        (Byte::Single(0xEB), "l"),
        // System variables (incomplete: TODO)
        (Byte::Double([0x5C, 0x00]), "[A]"),
        (Byte::Double([0x5C, 0x01]), "[B]"),
        (Byte::Double([0x5C, 0x02]), "[C]"),
        (Byte::Double([0x5C, 0x03]), "[D]"),
        (Byte::Double([0x5C, 0x04]), "[E]"),
        (Byte::Double([0x5C, 0x05]), "[F]"),
        (Byte::Double([0x5C, 0x06]), "[G]"),
        (Byte::Double([0x5C, 0x07]), "[H]"),
        (Byte::Double([0x5C, 0x08]), "[I]"),
        (Byte::Double([0x5C, 0x09]), "[J]"),
        (Byte::Double([0x5D, 0x00]), "l1"),
        (Byte::Double([0x5D, 0x01]), "l2"),
        (Byte::Double([0x5D, 0x02]), "l3"),
        (Byte::Double([0x5D, 0x03]), "l4"),
        (Byte::Double([0x5D, 0x04]), "l5"),
        (Byte::Double([0x5D, 0x05]), "l6"),
        (Byte::Double([0x5D, 0x06]), "l7"),
        (Byte::Double([0x5D, 0x07]), "l8"),
        (Byte::Double([0x5D, 0x08]), "l0"),
        (Byte::Double([0x5E, 0x10]), "y1"),
        (Byte::Double([0x5E, 0x11]), "y2"),
        (Byte::Double([0x5E, 0x12]), "y3"),
        (Byte::Double([0x5E, 0x13]), "y4"),
        (Byte::Double([0x5E, 0x14]), "y5"),
        (Byte::Double([0x5E, 0x15]), "y6"),
        (Byte::Double([0x5E, 0x16]), "y7"),
        (Byte::Double([0x5E, 0x17]), "y8"),
        (Byte::Double([0x5E, 0x18]), "y9"),
        (Byte::Double([0x5E, 0x19]), "y0"),
        (Byte::Double([0x5E, 0x40]), "r_1"),
        (Byte::Double([0x5E, 0x41]), "r_2"),
        (Byte::Double([0x5E, 0x42]), "r_3"),
        (Byte::Double([0x5E, 0x43]), "r_4"),
        (Byte::Double([0x5E, 0x44]), "r_5"),
        (Byte::Double([0x5E, 0x45]), "r_6"),
        (Byte::Double([0x5E, 0x20]), "x1t"),
        (Byte::Double([0x5E, 0x21]), "y1t"),
        (Byte::Double([0x5E, 0x22]), "x2t"),
        (Byte::Double([0x5E, 0x23]), "y2t"),
        (Byte::Double([0x5E, 0x24]), "x3t"),
        (Byte::Double([0x5E, 0x25]), "y3t"),
        (Byte::Double([0x5E, 0x26]), "x4t"),
        (Byte::Double([0x5E, 0x27]), "y4t"),
        (Byte::Double([0x5E, 0x28]), "x5t"),
        (Byte::Double([0x5E, 0x29]), "y5t"),
        (Byte::Double([0x5E, 0x2A]), "x6t"),
        (Byte::Double([0x5E, 0x2B]), "y6t"),
        (Byte::Double([0x60, 0x00]), "Pic1"),
        (Byte::Double([0x60, 0x01]), "Pic2"),
        (Byte::Double([0x60, 0x02]), "Pic3"),
        (Byte::Double([0x60, 0x03]), "Pic4"),
        (Byte::Double([0x60, 0x04]), "Pic5"),
        (Byte::Double([0x60, 0x05]), "Pic6"),
        (Byte::Double([0x60, 0x06]), "Pic7"),
        (Byte::Double([0x60, 0x07]), "Pic8"),
        (Byte::Double([0x60, 0x08]), "Pic9"),
        (Byte::Double([0x60, 0x09]), "Pic0"),
        (Byte::Double([0x61, 0x00]), "GDB1"),
        (Byte::Double([0x61, 0x01]), "GDB2"),
        (Byte::Double([0x61, 0x02]), "GDB3"),
        (Byte::Double([0x61, 0x03]), "GDB4"),
        (Byte::Double([0x61, 0x04]), "GDB5"),
        (Byte::Double([0x61, 0x05]), "GDB6"),
        (Byte::Double([0x61, 0x06]), "GDB7"),
        (Byte::Double([0x61, 0x07]), "GDB8"),
        (Byte::Double([0x61, 0x08]), "GDB9"),
        (Byte::Double([0x61, 0x09]), "GDB0"),
        (Byte::Double([0x62, 0x01]), "RegEq"),
        (Byte::Double([0x62, 0x03]), "[x-bar]"),
        (Byte::Double([0x62, 0x04]), "[Summ x]"),
        (Byte::Double([0x62, 0x05]), "[Summ x^2]"),
        (Byte::Double([0x62, 0x06]), "Sx"),
        (Byte::Double([0x62, 0x07]), "[sigma]x"),
        (Byte::Double([0x62, 0x08]), "minX"),
        (Byte::Double([0x62, 0x09]), "maxX"),
        (Byte::Double([0x62, 0x0A]), "minY"),
        (Byte::Double([0x62, 0x0B]), "maxY"),
        (Byte::Double([0x62, 0x0C]), "[y-bar]"),
        (Byte::Double([0x62, 0x0D]), "[Summ y]"),
        (Byte::Double([0x62, 0x0E]), "[Summ y^2]"),
        (Byte::Double([0x62, 0x0F]), "Sy"),
        (Byte::Double([0x62, 0x10]), "[sigma]y"),
        (Byte::Double([0x62, 0x11]), "[Summ xy]"),
        (Byte::Double([0x62, 0x13]), "Med"),
        (Byte::Double([0x62, 0x14]), "Q1"),
        (Byte::Double([0x62, 0x15]), "Q3"),
        (Byte::Double([0x62, 0x1B]), "x1"),
        (Byte::Double([0x62, 0x1C]), "x2"),
        (Byte::Double([0x62, 0x1D]), "x3"),
        (Byte::Double([0x62, 0x1E]), "y1"),
        (Byte::Double([0x62, 0x1F]), "y2"),
        (Byte::Double([0x62, 0x20]), "y3"),
        (Byte::Double([0x62, 0x25]), "[chi]2"),
        (Byte::Double([0x62, 0x26]), "[fin]"),
        (Byte::Double([0x62, 0x27]), "df"),
        (Byte::Double([0x62, 0x28]), "[p-hat]"),
        (Byte::Double([0x62, 0x29]), "[p-hat]1"),
        (Byte::Double([0x62, 0x2A]), "[p-hat]2"),
        (Byte::Double([0x62, 0x2B]), "[x-bar]1"),
        (Byte::Double([0x62, 0x2C]), "Sx1"),
        (Byte::Double([0x62, 0x2D]), "n_1"),
        (Byte::Double([0x62, 0x2E]), "[x-bar]2"),
        (Byte::Double([0x62, 0x2F]), "Sx2"),
        (Byte::Double([0x62, 0x30]), "n_2"),
        (Byte::Double([0x62, 0x31]), "Sxp"),
        (Byte::Double([0x62, 0x32]), "lower"),
        (Byte::Double([0x62, 0x33]), "upper"),
        (Byte::Double([0x62, 0x35]), "r2"),
        (Byte::Double([0x62, 0x36]), "R2"),
        (Byte::Double([0x62, 0x38]), "SS"),
        (Byte::Double([0x62, 0x39]), "MS"),
        (Byte::Double([0x63, 0x00]), "ZXscl"),
        (Byte::Double([0x63, 0x01]), "ZYscl"),
        (Byte::Double([0x63, 0x02]), "Xscl"),
        (Byte::Double([0x63, 0x03]), "Yscl"),
        (Byte::Double([0x63, 0x04]), "U_nStart"),
        (Byte::Double([0x63, 0x05]), "V_nStart"),
        (Byte::Double([0x63, 0x06]), "U_(n-1)"),
        (Byte::Double([0x63, 0x07]), "V_(n-1)"),
        // System variables (TODO)
        (Byte::Double([0xAA, 0x00]), "Str1"),
        (Byte::Double([0xAA, 0x01]), "Str2"),
        (Byte::Double([0xAA, 0x02]), "Str3"),
        (Byte::Double([0xAA, 0x03]), "Str4"),
        (Byte::Double([0xAA, 0x04]), "Str5"),
        (Byte::Double([0xAA, 0x05]), "Str6"),
        (Byte::Double([0xAA, 0x06]), "Str7"),
        (Byte::Double([0xAA, 0x07]), "Str8"),
        (Byte::Double([0xAA, 0x08]), "Str9"),
        (Byte::Double([0xAA, 0x09]), "Str0"),
        // BB tokens (two-byte), Incomplete TODO
        (Byte::Double([0xBB, 0x00]), "npv("),
        (Byte::Double([0xBB, 0x01]), "irr("),
        (Byte::Double([0xBB, 0x02]), "bal("),
        (Byte::Double([0xBB, 0x03]), "SummPrn("),
        (Byte::Double([0xBB, 0x04]), "SummInt("),
        (Byte::Double([0xBB, 0x05]), ">Nom("),
        (Byte::Double([0xBB, 0x06]), ">Eff("),
        (Byte::Double([0xBB, 0x07]), "dbd("),
        (Byte::Double([0xBB, 0x08]), "Icm("),
        (Byte::Double([0xBB, 0x09]), "gcd("),
        (Byte::Double([0xBB, 0x0A]), "randInt("),
        (Byte::Double([0xBB, 0x0B]), "randBin("),
        (Byte::Double([0xBB, 0x0C]), "sub("),
        (Byte::Double([0xBB, 0x0D]), "stdDev("),
        (Byte::Double([0xBB, 0x0E]), "variance("),
        (Byte::Double([0xBB, 0x0F]), "inString("),
        (Byte::Double([0xBB, 0xB0]), "a"),
        (Byte::Double([0xBB, 0xB1]), "b"),
        (Byte::Double([0xBB, 0xB2]), "c"),
        (Byte::Double([0xBB, 0xB3]), "d"),
        (Byte::Double([0xBB, 0xB4]), "e"),
        (Byte::Double([0xBB, 0xB5]), "f"),
        (Byte::Double([0xBB, 0xB6]), "g"),
        (Byte::Double([0xBB, 0xB7]), "h"),
        (Byte::Double([0xBB, 0xB8]), "i"),
        (Byte::Double([0xBB, 0xB9]), "j"),
        (Byte::Double([0xBB, 0xBA]), "k"),
        (Byte::Double([0xBB, 0xBC]), "l"),
        (Byte::Double([0xBB, 0xBD]), "m"),
        (Byte::Double([0xBB, 0xBE]), "n"),
        (Byte::Double([0xBB, 0xBF]), "o"),
        (Byte::Double([0xBB, 0xC0]), "p"),
        (Byte::Double([0xBB, 0xC1]), "q"),
        (Byte::Double([0xBB, 0xC2]), "r"),
        (Byte::Double([0xBB, 0xC3]), "s"),
        (Byte::Double([0xBB, 0xC4]), "t"),
        (Byte::Double([0xBB, 0xC5]), "u"),
        (Byte::Double([0xBB, 0xC6]), "v"),
        (Byte::Double([0xBB, 0xC7]), "w"),
        (Byte::Double([0xBB, 0xC8]), "x"),
        (Byte::Double([0xBB, 0xC9]), "y"),
        (Byte::Double([0xBB, 0xCA]), "z"),
        (Byte::Double([0xBB, 0x52]), "ClrAllLists"),
        (Byte::Double([0xBB, 0x4F]), "a+bi"),
        (Byte::Double([0xBB, 0x4D]), "Real"),
        (Byte::Double([0xBB, 0x67]), "DiagnosticOff"),
        (Byte::Double([0xBB, 0x51]), "ExprOff"),
        (Byte::Double([0xBB, 0x66]), "DiagnosticOn"),
        (Byte::Double([0xBB, 0x50]), "ExprOn"),
        (Byte::Double([0xBB, 0x4A]), "SetUpEditor "),
        (Byte::Double([0xBB, 0x68]), "Archive "),
        (Byte::Double([0xBB, 0x54]), "DelVar "),
        // end of xBB
        (Byte::Double([0xEF, 0x67]), "TextColor("),
        (Byte::Double([0xEF, 0x5B]), "BackgroundOn "),
        (Byte::Double([0xEF, 0x41]), "BLUE"),
        (Byte::Double([0xEF, 0x42]), "RED"),
        (Byte::Double([0xEF, 0x43]), "BLACK"),
        (Byte::Double([0xEF, 0x44]), "MAGENTA"),
        (Byte::Double([0xEF, 0x45]), "GREEN"),
        (Byte::Double([0xEF, 0x46]), "ORANGE"),
        (Byte::Double([0xEF, 0x47]), "BROWN"),
        (Byte::Double([0xEF, 0x48]), "NAVY"),
        (Byte::Double([0xEF, 0x49]), "LTBLUE"),
        (Byte::Double([0xEF, 0x4A]), "YELLOW"),
        (Byte::Double([0xEF, 0x4B]), "WHITE"),
        (Byte::Double([0xEF, 0x4C]), "LTGRAY"),
        (Byte::Double([0xEF, 0x4D]), "MEDGRAY"),
        (Byte::Double([0xEF, 0x4E]), "GRAY"),
        (Byte::Double([0xEF, 0x4F]), "DRAKGRAY"),
        (Byte::Double([0xEF, 0x09]), "getDate"),
        (Byte::Double([0xEF, 0x0A]), "getTime"),
        (Byte::Double([0xEF, 0x06]), "dayOfWk("),
        (Byte::Double([0xEF, 0x64]), "BackgroundOff"),
        (Byte::Double([0xEF, 0x32]), "remainder("),
        (Byte::Double([0xEF, 0x6C]), "BorderColor "),
        (Byte::Double([0xEF, 0x37]), "MATHPRINT"),
        (Byte::Double([0xEF, 0x3B]), "AUTO"),
        (Byte::Double([0xEF, 0x39]), "[n/d]"),
        (Byte::Double([0xEF, 0x10]), "ClockOn"),
        (Byte::Double([0xEF, 0x0F]), "ClockOff"),
        (Byte::Double([0xEF, 0x96]), "Wait "),
        (Byte::Double([0xEF, 0x38]), "CLASSIC"),
        (Byte::Double([0xEF, 0x75]), "Dot-Thin"),
        (Byte::Double([0xEF, 0x3A]), "[Un/d]"),
        (Byte::Double([0xEF, 0x40]), "STARTWIZARD OFF"),
        (Byte::Double([0xEF, 0x6B]), "DetectAsymOff"),
        (Byte::Double([0xEF, 0x6A]), "DetectAsymOn"),
        (Byte::Double([0xEF, 0x3F]), "STARTWIZARD ON"),
        // 73 ** (Graph Options)
        (Byte::Double([0x7E, 0x06]), "Thick"),
        (Byte::Double([0x7E, 0x00]), "Sequential"),
        (Byte::Double([0x7E, 0x01]), "Simul"),
        (Byte::Double([0x7E, 0x02]), "PolarGC"),
        (Byte::Double([0x7E, 0x03]), "RectGC"),
        (Byte::Double([0x7E, 0x04]), "CoordOn"),
        (Byte::Double([0x7E, 0x05]), "CoordOff"),
        (Byte::Double([0x7E, 0x06]), "Connected"),
        (Byte::Double([0x7E, 0x07]), "Dot"),
        (Byte::Double([0x7E, 0x08]), "AxesOn"),
        (Byte::Double([0x7E, 0x09]), "AxesOff"),
        (Byte::Double([0x7E, 0x0A]), "GridOn"),
        (Byte::Double([0x7E, 0x0B]), "GridOff"),
        (Byte::Double([0x7E, 0x0C]), "LabelOn"),
        (Byte::Double([0x7E, 0x0D]), "LabelOff"),
        (Byte::Double([0x7E, 0x0E]), "Web"),
        (Byte::Double([0x7E, 0x0F]), "Time"),
        (Byte::Double([0x7E, 0x10]), "uvAxes"),
        (Byte::Double([0x7E, 0x11]), "vwAxes"),
        (Byte::Double([0x7E, 0x12]), "uwAxes"),
    ].iter().copied().collect();
}
